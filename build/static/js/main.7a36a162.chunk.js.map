{"version":3,"sources":["redux/reducers/lists-reduser.js","redux/redux-store.js","components/list/item/TodoListItem.js","components/list/TodoList.js","redux/selectors/selector.js","components/list/TodoListContainer.js","App.js","AppContainer.js","index.js"],"names":["ADD_NEW_TODO","ADD_NEW_TASK","DELETE_TODO","DELETE_TASK","CHANGE_TASK_TEXT","initialState","todos","id","name","tasks","taskText","done","getRandomId","Math","round","random","listReduser","state","action","type","map","todo","todoId","filter","task","taskId","reducers","combineReducers","lists","listsReducers","store","createStore","applyMiddleware","ThunkMiddleware","TodoListItem","props","useState","editMode","setEditMode","setTaskText","onChange","e","target","value","onClick","changeTaskText","deleteTask","TodoList","addTask","setAddTask","newTaskText","setNewTaskText","length","addNewTask","deleteTodo","getLists","connect","list","item","addNewTodo","todoListName","setTodoListName","className","alert","AppContainer","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a36a162.chunk.js","sourcesContent":["const ADD_NEW_TODO = \"ADD-NEW-TODO\";\r\nconst ADD_NEW_TASK = \"ADD-NEW-TASK\";\r\nconst DELETE_TODO = \"DELETE-TODO\";\r\nconst DELETE_TASK = \"DELETE-TASK\";\r\nconst CHANGE_TASK_TEXT = \"CHANGE-TASK-TEXT\";\r\n\r\nlet initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            name: \"first List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"1first task\", done: false },\r\n                { id: 2, taskText: \"first task\", done: true },\r\n                { id: 3, taskText: \"first task\", done: false },\r\n            ]\r\n        }, {\r\n            id: 2,\r\n            name: \"second List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"2first task\", done: true },\r\n                { id: 2, taskText: \"first task\", done: false },\r\n                { id: 3, taskText: \"first task\", done: false },\r\n            ]\r\n        }, {\r\n            id: 3,\r\n            name: \"third List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"3first task\", done: true },\r\n                { id: 2, taskText: \"first task\", done: false },\r\n                { id: 3, taskText: \"first task\", done: true },\r\n            ]\r\n        },\r\n    ]\r\n}\r\n\r\nlet getRandomId = () => (Math.round(100000 * Math.random()))\r\n\r\nconst listReduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_NEW_TODO: return {\r\n            ...state,\r\n            todos: [\r\n                ...state.todos,\r\n                { id: getRandomId(), name: action.name, tasks: [] },\r\n            ]\r\n        }\r\n        case ADD_NEW_TASK: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                debugger\r\n                if (action.todoId === todo.id) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: [\r\n                            ...todo.tasks,\r\n                            { id: getRandomId(), taskText: action.taskText, done: false },\r\n                        ]\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        }\r\n        case DELETE_TODO: return {\r\n            ...state,\r\n            todos: state.todos.filter(todo => todo.id !== action.todoId)\r\n        }\r\n        case DELETE_TASK: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.filter(task => task.id !== action.taskId)\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n        case CHANGE_TASK_TEXT: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.map(task => {\r\n                            if (task.id === action.taskId) {\r\n                                return {\r\n                                    ...task,\r\n                                    taskText: action.taskText\r\n                                }\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addNewTodo = (name) => ({ type: ADD_NEW_TODO, name });\r\nexport const addNewTask = (todoId, taskText) => ({ type: ADD_NEW_TASK, todoId, taskText });\r\nexport const deleteTodo = (todoId) => ({ type: DELETE_TODO, todoId });\r\nexport const deleteTask = (todoId, taskId) => ({ type: DELETE_TASK, todoId, taskId });\r\nexport const changeTaskText = (todoId, taskId, taskText) => ({ type: CHANGE_TASK_TEXT, todoId, taskId, taskText })\r\n\r\nexport default listReduser;","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport listsReducers from './reducers/lists-reduser'\r\nimport ThunkMiddleware from 'redux-thunk'\r\n\r\nconst reducers = combineReducers({\r\n    lists: listsReducers\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(ThunkMiddleware));\r\n\r\nexport default store;","\r\nimport { useState } from 'react';\r\n\r\nconst TodoListItem = (props) => {\r\n\r\n    let[ editMode, setEditMode] = useState(false);\r\n    let[taskText, setTaskText] = useState(props.taskText);\r\n\r\n    let onEditModeOn= () =>{\r\n        setEditMode(true);\r\n    }\r\n    let onEditModeOff= () =>{\r\n        props.changeTaskText(props.todoId, props.taskId)\r\n        setEditMode(false);\r\n    }\r\n\r\n    let onTaskTextChanged= (e) => {\r\n        setTaskText(e.target.value);\r\n    }\r\n\r\n    let onDeleteTask = () => {\r\n        props.deleteTask(props.todoId, props.taskId)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='checkbox'></input>\r\n            {editMode?\r\n            <input type='text' onChange={onTaskTextChanged} value={taskText} />\r\n            :\r\n            <span>{taskText}</span>\r\n            }\r\n            \r\n            <span>\r\n                <button  onClick={editMode ? onEditModeOff : onEditModeOn}  type='submit'>Edit</button>\r\n                <button onClick={onDeleteTask}>Delete</button>\r\n            </span>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;","import Item from './item/TodoListItem'\r\nimport { useState } from 'react'\r\n\r\nconst TodoList = (props) => {\r\n    let [addTask, setAddTask] = useState(false);\r\n    let [newTaskText, setNewTaskText] = useState(\"\");\r\n\r\n    let tasks = props.tasks;\r\n    if (tasks.length > 0) {\r\n        tasks = props.tasks.map(task => {\r\n            return <Item\r\n                changeTaskText={props.changeTaskText}\r\n                key={task.id}\r\n                todoId={props.id}\r\n                taskId={task.id}\r\n                taskText={task.taskText}\r\n                deleteTask={props.deleteTask} />\r\n        })\r\n    }\r\n\r\n    let onSetAddTaskOn = () => {\r\n        setAddTask(true);\r\n    }\r\n    let onSetAddTaskOff = () => {\r\n        props.addNewTask(props.id, newTaskText);\r\n        setNewTaskText(\"\");\r\n        setAddTask(false);\r\n    }\r\n\r\n    let onChangeNewTaskText = (e) => {\r\n        setNewTaskText(e.target.value);\r\n    }\r\n\r\n    let onDeleteTodo = () => {\r\n        props.deleteTodo(props.id);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2>\r\n                    {props.name}\r\n                    {addTask ?\r\n                        <div>\r\n                            <input type=\"text\" onChange={onChangeNewTaskText} value={newTaskText} />\r\n                            <button onClick={onSetAddTaskOff}>add</button>\r\n                        </div>\r\n                        :\r\n                        <button onClick={onSetAddTaskOn}>Add new task</button>\r\n                    }\r\n\r\n                    <button onClick={onDeleteTodo}>Delete</button>\r\n                </h2>\r\n\r\n            </div >\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TodoList;","export const getLists = (store) => {\r\n    return store.lists.todos;\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport TodoList from './TodoList'\r\nimport { getLists } from '../../redux/selectors/selector'\r\nimport { addNewTask, deleteTodo, deleteTask, changeTaskText } from './../../redux/reducers/lists-reduser';\r\n\r\nconst TodoListContainer = (props) => {\r\n\r\n    let list = props.lists.map((item => {\r\n        return <TodoList\r\n            changeTaskText={props.changeTaskText}\r\n            deleteTask={props.deleteTask}\r\n            deleteTodo={props.deleteTodo}\r\n            addNewTask={props.addNewTask}\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            tasks={item.tasks} />\r\n    }));\r\n\r\n    return <>{list}</>\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (store) => {\r\n    return {\r\n        lists: getLists(store),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    addNewTask,\r\n    deleteTodo,\r\n    deleteTask,\r\n    changeTaskText,\r\n})(TodoListContainer);\r\n","import TodoListContainer from './components/list/TodoListContainer';\nimport { connect } from 'react-redux';\nimport { addNewTodo } from './redux/reducers/lists-reduser';\nimport { useState } from 'react'\n\nfunction App(props) {\n\n  let [todoListName, setTodoListName] = useState(\"\");\n\n  let onAddNewTodoList = () => {\n    if (todoListName) {\n      props.addNewTodo(todoListName);\n      setTodoListName('');\n    }\n    else alert(\"How about name for your new list\")\n  }\n\n  let onChangeAddLost = (e) => {\n    setTodoListName(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>TODO</h1>\n        <input onChange={onChangeAddLost} type=\"text\" value={todoListName} />\n        <button onClick={onAddNewTodoList}>NewList</button>\n      </div>\n      <div>\n        <TodoListContainer />\n      </div>\n\n    </div>\n  );\n}\n\nlet mapStateToProps = (store) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, {\n  addNewTodo,\n})(App);\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from './redux/redux-store';\r\nimport App from './App';\r\n\r\nlet AppContainer = () => {\r\n    return(\r\n        <Provider store={store}>\r\n          <App />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default AppContainer;","import React from 'react';\nimport {render} from 'react-dom';\nimport AppContainer from './AppContainer';\n\nrender(<AppContainer />, document.getElementById('root'));\n"],"sourceRoot":""}