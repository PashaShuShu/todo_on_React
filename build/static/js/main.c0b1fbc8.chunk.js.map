{"version":3,"sources":["redux/reducers/lists-reduser.js","redux/redux-store.js","components/list/item/TodoListItem.js","components/list/TodoList.js","redux/selectors/selector.js","components/list/TodoListContainer.js","App.js","AppContainer.js","index.js","components/list/list.module.css","App.module.css"],"names":["ADD_NEW_TODO","ADD_NEW_TASK","DELETE_TODO","DELETE_TASK","CHANGE_TASK_TEXT","CHANGE_TASK_DONE","initialState","todos","id","name","tasks","taskText","done","getRandomId","Math","round","random","listReduser","state","action","type","map","todo","todoId","filter","task","taskId","reducers","combineReducers","lists","listsReducers","store","createStore","applyMiddleware","ThunkMiddleware","TodoListItem","props","useState","editMode","setEditMode","setTaskText","className","classes","onClick","changeDone","checkbox","checked","task_text","task_done","onChange","e","target","value","task_buttons","changeTaskText","deleteTask","TodoList","addTask","setAddTask","newTaskText","setNewTaskText","length","todo_name","addNewTask","deleteTodo","getLists","connect","list","item","addNewTodo","todoListName","setTodoListName","App","list_name","placeholder","alert","AppContainer","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c0b1fbc8.chunk.js","sourcesContent":["const ADD_NEW_TODO = \"ADD-NEW-TODO\";\r\nconst ADD_NEW_TASK = \"ADD-NEW-TASK\";\r\nconst DELETE_TODO = \"DELETE-TODO\";\r\nconst DELETE_TASK = \"DELETE-TASK\";\r\nconst CHANGE_TASK_TEXT = \"CHANGE-TASK-TEXT\";\r\nconst CHANGE_TASK_DONE = \"CHANGE-TASK-DONE\";\r\n\r\nlet initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            name: \"first List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"1first task\", done: false },\r\n                { id: 2, taskText: \"first task\", done: true },\r\n                { id: 3, taskText: \"first task\", done: false },\r\n            ]\r\n        }, {\r\n            id: 2,\r\n            name: \"second List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"2first task\", done: true },\r\n                { id: 2, taskText: \"first task\", done: false },\r\n                { id: 3, taskText: \"first task\", done: false },\r\n            ]\r\n        }, {\r\n            id: 3,\r\n            name: \"third List\",\r\n            tasks: [\r\n                { id: 0, taskText: \"3first task\", done: true },\r\n                { id: 2, taskText: \"first task\", done: false },\r\n                { id: 3, taskText: \"first task\", done: true },\r\n            ]\r\n        },\r\n    ]\r\n}\r\n\r\nlet getRandomId = () => (Math.round(100000 * Math.random()))\r\n\r\nconst listReduser = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_NEW_TODO: return {\r\n            ...state,\r\n            todos: [\r\n                ...state.todos,\r\n                { id: getRandomId(), name: action.name, tasks: [] },\r\n            ]\r\n        }\r\n        case ADD_NEW_TASK: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                debugger\r\n                if (action.todoId === todo.id) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: [\r\n                            ...todo.tasks,\r\n                            { id: getRandomId(), taskText: action.taskText, done: false },\r\n                        ]\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        }\r\n        case DELETE_TODO: return {\r\n            ...state,\r\n            todos: state.todos.filter(todo => todo.id !== action.todoId)\r\n        }\r\n        case DELETE_TASK: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.filter(task => task.id !== action.taskId)\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n        case CHANGE_TASK_TEXT: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.map(task => {\r\n                            if (task.id === action.taskId) {\r\n                                return {\r\n                                    ...task,\r\n                                    taskText: action.taskText\r\n                                }\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n        case CHANGE_TASK_DONE: return {\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === action.todoId) {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: todo.tasks.map(task => {\r\n                            if (task.id === action.taskId) {\r\n                                return {\r\n                                    ...task,\r\n                                    done: !task.done,\r\n                                }\r\n                            }\r\n                            return task\r\n                        })\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addNewTodo = (name) => ({ type: ADD_NEW_TODO, name });\r\nexport const addNewTask = (todoId, taskText) => ({ type: ADD_NEW_TASK, todoId, taskText });\r\nexport const deleteTodo = (todoId) => ({ type: DELETE_TODO, todoId });\r\nexport const deleteTask = (todoId, taskId) => ({ type: DELETE_TASK, todoId, taskId });\r\nexport const changeTaskText = (todoId, taskId, taskText) => ({ type: CHANGE_TASK_TEXT, todoId, taskId, taskText })\r\nexport const changeDone = (todoId, taskId) => ({ type: CHANGE_TASK_DONE, todoId, taskId })\r\n\r\nexport default listReduser;","import {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport listsReducers from './reducers/lists-reduser'\r\nimport ThunkMiddleware from 'redux-thunk'\r\n\r\nconst reducers = combineReducers({\r\n    lists: listsReducers\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(ThunkMiddleware));\r\n\r\nexport default store;","import classes from '../list.module.css'\r\nimport { useState } from 'react';\r\n\r\nconst TodoListItem = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [taskText, setTaskText] = useState(props.taskText);\r\n\r\n    let onEditModeOn = () => {\r\n        setEditMode(true);\r\n    }\r\n    let onEditModeOff = () => {\r\n        props.changeTaskText(props.todoId, props.taskId)\r\n        setEditMode(false);\r\n    }\r\n\r\n    let onTaskTextChanged = (e) => {\r\n        setTaskText(e.target.value);\r\n    }\r\n\r\n    let onDeleteTask = () => {\r\n        props.deleteTask(props.todoId, props.taskId)\r\n    }\r\n\r\n    let onDone = () => {\r\n        props.changeDone(props.todoId, props.taskId)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.tasks}>\r\n            <div>\r\n                <input onClick={onDone} className={classes.checkbox} type='checkbox' checked={props.done}></input>\r\n                <span className={classes.task_text, props.done ? classes.task_done : null} >\r\n                    {editMode ?\r\n                        <input type='text' onChange={onTaskTextChanged} value={taskText} />\r\n                        :\r\n                        <span>{taskText}</span>\r\n                    }\r\n                </span>\r\n            </div>\r\n            <div className={classes.task_buttons}>\r\n                <button className=\"btn btn-primary\" onClick={editMode ? onEditModeOff : onEditModeOn} type='submit'>Edit</button>\r\n                <button className=\"btn btn-outline-danger\" onClick={onDeleteTask}>Delete</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;","import Item from './item/TodoListItem'\r\nimport { useState } from 'react'\r\nimport classes from './list.module.css'\r\n\r\nconst TodoList = (props) => {\r\n    let [addTask, setAddTask] = useState(false);\r\n    let [newTaskText, setNewTaskText] = useState(\"\");\r\n\r\n    let tasks = props.tasks;\r\n    if (tasks.length > 0) {\r\n        tasks = props.tasks.map(task => {\r\n            return <Item\r\n                changeDone={props.changeDone}\r\n                changeTaskText={props.changeTaskText}\r\n                key={task.id}\r\n                todoId={props.id}\r\n                taskId={task.id}\r\n                taskText={task.taskText}\r\n                deleteTask={props.deleteTask}\r\n                done={task.done}\r\n            />\r\n        })\r\n    }\r\n\r\n    let onSetAddTaskOn = () => {\r\n        setAddTask(true);\r\n    }\r\n    let onSetAddTaskOff = () => {\r\n        props.addNewTask(props.id, newTaskText);\r\n        setNewTaskText(\"\");\r\n        setAddTask(false);\r\n    }\r\n\r\n    let onChangeNewTaskText = (e) => {\r\n        setNewTaskText(e.target.value);\r\n    }\r\n\r\n    let onDeleteTodo = () => {\r\n        props.deleteTodo(props.id);\r\n    }\r\n\r\n    return (\r\n        <div className={\"p-4 p-md-5 mb-4 text-white rounded bg-dark\"}>\r\n            <div>\r\n                <h2>\r\n                    <span className={classes.todo_name}>{props.name}</span>\r\n                    {addTask ?\r\n                        <div>\r\n                            <input type=\"text\" onChange={onChangeNewTaskText} value={newTaskText} />\r\n                            <button className=\"btn btn-success\" onClick={onSetAddTaskOff}>add</button>\r\n                        </div>\r\n                        :\r\n                        <button className=\"btn btn-success\" onClick={onSetAddTaskOn}>Add new task</button>\r\n                    }\r\n\r\n                    <button className=\"btn btn-outline-danger\" onClick={onDeleteTodo}>Delete</button>\r\n                </h2>\r\n\r\n            </div >\r\n            <div>\r\n                {tasks}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TodoList;","export const getLists = (store) => {\r\n    return store.lists.todos;\r\n}\r\n\r\n","import { connect } from 'react-redux';\r\nimport TodoList from './TodoList'\r\nimport { getLists } from '../../redux/selectors/selector'\r\nimport { addNewTask, deleteTodo, deleteTask, changeTaskText, changeDone } from './../../redux/reducers/lists-reduser';\r\n\r\nconst TodoListContainer = (props) => {\r\n\r\n    let list = props.lists.map((item => {\r\n        return <TodoList\r\n            changeDone={props.changeDone}\r\n            changeTaskText={props.changeTaskText}\r\n            deleteTask={props.deleteTask}\r\n            deleteTodo={props.deleteTodo}\r\n            addNewTask={props.addNewTask}\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            tasks={item.tasks} />\r\n    }));\r\n\r\n    return <>{list}</>\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (store) => {\r\n    return {\r\n        lists: getLists(store),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeDone,\r\n    addNewTask,\r\n    deleteTodo,\r\n    deleteTask,\r\n    changeTaskText,\r\n})(TodoListContainer);\r\n","import TodoListContainer from './components/list/TodoListContainer';\nimport { connect } from 'react-redux';\nimport { addNewTodo } from './redux/reducers/lists-reduser';\nimport { useState } from 'react'\nimport classes from './App.module.css'\n\nfunction App(props) {\n\n  let [todoListName, setTodoListName] = useState(\"\");\n\n  let onAddNewTodoList = () => {\n    if (todoListName) {\n      props.addNewTodo(todoListName);\n      setTodoListName('');\n    }\n    else alert(\"How about name for your new list\")\n  }\n\n  let onChangeAddLost = (e) => {\n    setTodoListName(e.target.value);\n  }\n\n  return (\n    <div className={classes.App}>\n      <div>\n        <h1>TODO</h1>\n        <input className={classes.list_name} placeholder=\"new list name\" onChange={onChangeAddLost} type=\"text\" value={todoListName} />\n        <button className=\"btn btn-success\" onClick={onAddNewTodoList}>NewList</button>\n      </div>\n      <div className={classes.todos}>\n        <TodoListContainer />\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (store) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, {\n  addNewTodo,\n})(App);\n","import { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from './redux/redux-store';\r\nimport App from './App';\r\n\r\nlet AppContainer = () => {\r\n    return(\r\n        <Provider store={store}>\r\n          <App />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default AppContainer;","import React from 'react';\nimport {render} from 'react-dom';\nimport AppContainer from './AppContainer';\n\nrender(<AppContainer />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks\":\"list_tasks__223FS\",\"task_buttons\":\"list_task_buttons__15uWL\",\"task_text\":\"list_task_text__1zddT\",\"task_done\":\"list_task_done__2w2Yd\",\"checkbox\":\"list_checkbox__AfY2M\",\"todo_name\":\"list_todo_name__3EOfs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__8Az6V\",\"list_name\":\"App_list_name__1qjfb\",\"todos\":\"App_todos__2A8y2\"};"],"sourceRoot":""}